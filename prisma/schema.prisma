// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceType {
  campaign
  brief
  cassette
  media
  copy
  container
}

enum ViewingGroup {
  all
  admin
  shared
  creator
}

enum ResourceConfigType {
  campaign
  cassette
  media
  brief
  copy
}

model ResourceConfig {
  id String @id @default(uuid())
}

//Generic Attribute Tables

model Audit {
  id              String         @id @default(uuid())
  deleted         Boolean        @default(false)
  createdAt       DateTime       @default(now())
  creatorId       String
  creator         User           @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  lastUpdatedAt   DateTime       @default(now())
  lastUpdatedById String
  lastUpdatedBy   User           @relation("lastUpdated", fields: [lastUpdatedById], references: [id], onDelete: Cascade)
  changelog       Changelog[]
  richText        RichTextValue?
  user            UserValue?
  resource        Resource?
  CheckboxValue   CheckboxValue?
  DateValue       DateValue?
  DropdownValue   DropdownValue?
  MediaValue      MediaValue?
  CustomConfig    CustomConfig?
  ApprovalValue   ApprovalsList?
  ApprovalItem    ApprovalItem?
  LinkValue       LinkValue?
}

enum ChangeAction {
  created
  updated
  deleted
}

model Changelog {
  id           String       @id @default(uuid())
  //When did the change happen
  date         DateTime
  //What was the action taken? ie Created, Deleted, Updated
  action       ChangeAction
  //Which field/column was changed?
  changedField String
  //Stores both old value and new value - this is stored as JSON as it could be anything - this may not be best way to do
  value        Json
  //Who changed the value?
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  //Connection to audit table
  auditId      String
  audit        Audit        @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

//For attributes that are versioned - stores selected item and all versions
model VersionedAttribute {
  id                String                   @id @default(uuid())
  allVersions       VersionedAttributeItem[] @relation("allVersions")
  selectedVersion   VersionedAttributeItem?  @relation("selectedVersion", fields: [selectedVersionId], references: [id])
  selectedVersionId String?                  @unique
  //Relations
  copy              CopyDetails?
}

//Individual instance of a versioned attribute
model VersionedAttributeItem {
  id                   String              @id @default(uuid())
  version              Int                 @default(1)
  versionedAttribute   VersionedAttribute  @relation("allVersions", fields: [versionedAttributeId], references: [id], onDelete: Cascade)
  versionedAttributeId String
  selectedBy           VersionedAttribute? @relation("selectedVersion")
  selectedById         String?
  richTextValue        RichTextValue?      @relation(fields: [richTextValueId], references: [id], onDelete: Cascade)
  richTextValueId      String?             @unique
  approvalItems        ApprovalItem[]
}

//For ordering resources without using global values
model OrderedResourceList {
  id              String                    @id @default(uuid())
  items           OrderedResourceListItem[]
  CassetteDetails CassetteDetails[]
}

model OrderedResourceListItem {
  id               String               @id @default(uuid())
  order            Int
  resourceId       String
  resource         Resource             @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  list             OrderedResourceList? @relation(fields: [listId], references: [id])
  listId           String?
  customValueMap   CustomValues?        @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?
}

model Resource {
  id                          String                     @id @default(uuid())
  internalId                  Int                        @unique @default(autoincrement())
  //Options shared by all resources
  reference                   String?
  externalId                  String?
  name                        String?
  description                 String?
  notes                       String?
  assignedTo                  User?                      @relation(fields: [assignedToId], references: [id])
  assignedToId                String?
  approvalGroups              UserGroup[]
  audit                       Audit                      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  auditId                     String                     @unique
  approvals                   ApprovalsList?             @relation(fields: [approvalsListId], references: [id])
  textValues                  RichTextValue[]
  approvalsListId             String?                    @unique
  status                      Status                     @default(no_status)
  visibility                  Visibility[]               @default([visible])
  //Temporary - should be able to use attributes in the future instead
  meta                        Json?
  //Type of resource - for easier filtering
  resourceType                ResourceType
  //Folder that resource belongs in. Not currently used
  folderId                    String?
  folder                      Folder?                    @relation(fields: [folderId], references: [id])
  //Organisation that the resource belongs to
  organisationId              String
  organisation                Organisation               @relation("organisation_uuid", fields: [organisationId], references: [id], onDelete: Cascade)
  internalOrgId               Int?
  org                         Organisation?              @relation("organisation_internal_id", fields: [internalOrgId], references: [internalId], onDelete: Cascade)
  //Direct resource relation - @TODO this should really be conditional based on type but unsure how to do that
  cassetteDetails             CassetteDetails?
  briefDetails                BriefDetails?
  mediaDetails                MediaDetails?
  copyDetails                 CopyDetails?
  containerDetails            ContainerDetails?
  campaignDetails             CampaignDetails?
  //Template for resource's additional fields
  resourceAttributeTemplate   ResourceAttributeTemplate? @relation(fields: [resourceAttributeTemplateId], references: [id])
  resourceAttributeTemplateId String?
  //Relations - better way to do this definitely
  usingResources              Resource[]                 @relation("related")
  //Relations - better way to do this definitely
  usedByResources             Resource[]                 @relation("related")
  //Values on resource

  OrderedResourceListItem OrderedResourceListItem[]
  customValues            CustomValues?             @relation(fields: [customValuesId], references: [id])
  customValuesId          String?
  metrics                 Metric[]
  resourceTags            ResourceTag[]

  @@unique(fields: [organisationId, externalId, resourceType])
  @@index([organisationId], name: "resource_organisation_id_index")
  @@index([internalOrgId], name: "resource_internal_org_id_index")
  @@index([externalId], name: "resource_external_id_index")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  internalOrgId Int?
  organisation  Organisation? @relation(fields: [internalOrgId], references: [internalId], onDelete: Cascade)
  resourceTags  ResourceTag[]

  @@unique([name, internalOrgId])
  @@index([internalOrgId], name: "tags_internal_org_id_index")
  @@index([name], name: "tags_name_index")
}

model ResourceTag {
  id                 Int      @id @default(autoincrement())
  resourceInternalId Int
  resource           Resource @relation(fields: [resourceInternalId], references: [internalId], onDelete: Cascade)
  tagId              Int
  tag                Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  conditions         Json?

  @@unique([tagId, resourceInternalId, conditions])
}

model CustomValues {
  id             String                    @id @default(uuid())
  listItems      OrderedResourceListItem[]
  approvalItems  ApprovalItem[]
  linkValues     LinkValue[]
  dropdownValues DropdownValue[]
  mediaValues    MediaValue[]
  dateValues     DateValue[]
  richTextValues RichTextValue[]
  checkboxValues CheckboxValue[]
  userValues     UserValue[]
  resource       Resource[]
}

model CampaignDetails {
  //Campaign-specific fields
  id         String   @id @default(uuid())
  //Resource for generic data
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @unique
}

model CassetteDetails {
  //Cassette-specific fields
  id                 String               @id @default(uuid())
  goLiveDate         DateTime?
  formatTypes        FormatType[]
  cassetteTemplate   CassetteTemplate     @relation(fields: [cassetteTemplateId], references: [id])
  cassetteNumber     Int                  @default(autoincrement())
  cassetteTemplateId String               @default("bc59a8c2-748d-4e56-ac8a-b3316d429d3f")
  requiredMediaCount Int                  @default(0)
  //Cassette-specific ordered list of media
  mediaList          OrderedResourceList? @relation(fields: [mediaListId], references: [id])
  mediaListId        String?
  //Resource for generic data
  resource           Resource             @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId         String               @unique
}

model CopyDetails {
  //Copy-specific fields
  id                   String             @id @default(uuid())
  attribute            Attribute          @relation(fields: [attributeId], references: [id])
  attributeId          String
  //Copy is different from just standard Rich Text in that it is versioned. Versions are handled by the VersionedAttribute table
  versions             VersionedAttribute @relation(fields: [versionedAttributeId], references: [id], onDelete: Cascade)
  versionedAttributeId String             @unique
  //Resource for generic data
  resourceId           String             @unique
  resource             Resource           @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  //Relations
}

model ContainerDetails {
  //Container-specific fields
  id           String    @id @default(uuid())
  deliveryDate DateTime?
  //Resource for generic data
  resource     Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId   String    @unique
}

model MediaDetails {
  //Media-specific fields
  id          String                 @id @default(uuid())
  type        CassetteMediaFieldType
  publicId    String
  mediaUrl    String
  width       Int
  height      Int
  duration    Float?
  //Resource for generic data
  resource    Resource               @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId  String                 @unique
  mediaValues MediaValue[]
}

model ResourceAttributeTemplate {
  id           String       @id @default(uuid())
  name         String
  description  String?
  resourceType ResourceType

  //Organisations resource is available to
  organisations      Organisation[]
  //Attributes on the config
  attributes         Attribute[]
  //Briefs using config
  resources          Resource[]
  briefTemplates     ActiveResourceTemplates[] @relation("briefTemplate")
  mediaTemplates     ActiveResourceTemplates[] @relation("mediaTemplate")
  copyTemplates      ActiveResourceTemplates[] @relation("copyTemplate")
  cassetteTemplates  ActiveResourceTemplates[] @relation("cassetteTemplate")
  containerTemplates ActiveResourceTemplates[] @relation("containerTemplate")
  campaignTemplates  ActiveResourceTemplates[] @relation("campaignTemplate")

  @@unique(fields: [name, resourceType])
}

// model BriefAttributeTemplate {
//   id             String             @id @default(uuid())
//   name           String
//   description    String?
//   //Organisation that the template belongs to
//   organisationId String
//   organisation   Organisation       @relation(fields: [organisationId], references: [id], onDelete: Cascade)
//   //Attributes on the config
//   attributes     Attribute[]
//   //Briefs using config

//   @@unique(fields: [organisationId, name])
// }

model BriefDetails {
  //Brief-specific fields
  id         String   @id @default(uuid())
  link       String?
  //Resource for generic data
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @unique
}

enum AttributeType {
  text
  richText
  dropdown
  date
  checkbox
  user
  media
  link
}

//Attributes cover scenarios where data is dynamic. As an example, Briefs can be comprised of many different fields.
model Attribute {
  id             String                      @id @default(uuid())
  //Additional information for custom/dynamic attributes
  name           String
  reference      String?
  description    String?
  type           AttributeType?
  visibility     Visibility[]
  order          Int                         @default(0)
  required       Boolean                     @default(false)
  //Relations - attributes
  richTextConfig RichTextConfig?
  userConfig     UserConfig?
  checkboxConfig CheckboxConfig?
  dateConfig     DateConfig?
  dropdownConfig DropdownConfig?
  mediaConfig    MediaConfig?
  approvalConfig ApprovalsConfig?
  linkConfig     LinkConfig?
  customConfig   CustomConfig?
  templates      ResourceAttributeTemplate[]
  linkValues     LinkValue[]
  mediaValues    MediaValue[]
  dropdownValues DropdownValue[]
  dateValues     DateValue[]
  checkboxValues CheckboxValue[]
  richTextValues RichTextValue[]
  userValues     UserValue[]
  CopyDetails    CopyDetails[]
}

//For user-generated attributes - unsure how this will be generated currently
model CustomConfig {
  id             String       @id @default(uuid())
  //Custom attribute details
  attribute      Attribute    @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId    String       @unique
  //Organisation attribute belongs to
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  //Audit for custom attribute
  audit          Audit        @relation(fields: [auditId], references: [id])
  auditId        String       @unique
}

model RichTextConfig {
  id             String                  @id @default(uuid())
  //Config options 
  editorFeatures CopyFieldEditorFeatures @default(limited)
  textBoxSize    TextBoxSize             @default(small)
  //Config details
  attribute      Attribute               @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId    String                  @unique
}

model UserConfig {
  id          String      @id @default(uuid())
  //Config options
  userGroups  UserGroup[]
  //Config details
  attribute   Attribute   @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId String      @unique
}

model CheckboxConfig {
  id             String    @id @default(uuid())
  //Config options
  defaultChecked Boolean   @default(false)
  //Config details
  attribute      Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId    String    @unique
}

model DateConfig {
  id          String    @id @default(uuid())
  //Config options
  minDate     DateTime?
  maxDate     DateTime?
  //Config details
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId String    @unique
}

model DropdownConfig {
  id                String             @id @default(uuid())
  //Config options
  options           String[]
  //Config details
  attribute         Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId       String             @unique
  //Relations
  cassetteTemplates CassetteTemplate[]
}

enum MediaType {
  video
  image
  embed
}

model MediaConfig {
  id           String      @id @default(uuid())
  //Config options
  allowedTypes MediaType[]
  //Config details
  attribute    Attribute   @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId  String      @unique
}

model ApprovalsConfig {
  id          String          @id @default(uuid())
  //Config options
  userGroups  UserGroup[]
  //Config details
  attribute   Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId String          @unique
  //Config values
  values      ApprovalsList[]
}

model ApprovalItem {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  audit           Audit         @relation(fields: [auditId], references: [id])
  auditId         String        @unique
  status          UserStatus    @default(none)
  approvalsList   ApprovalsList @relation(fields: [approvalsListId], references: [id])
  approvalsListId String        @unique

  versionedAttributeItem   VersionedAttributeItem? @relation(fields: [versionedAttributeItemId], references: [id])
  versionedAttributeItemId String?                 @unique
  customValueMap           CustomValues?           @relation(fields: [customValueMapId], references: [id])
  customValueMapId         String?

  @@unique(fields: [userId, approvalsListId])
}

model ApprovalsList {
  id          String           @id @default(uuid())
  approvals   ApprovalItem[]
  //Audit for approvals value
  audit       Audit            @relation(fields: [auditId], references: [id])
  auditId     String           @unique
  //Config value is for
  attribute   ApprovalsConfig? @relation(fields: [attributeId], references: [id])
  attributeId String?
  User        User?            @relation(fields: [userId], references: [id])
  userId      String?
  resource    Resource?
}

model LinkConfig {
  id          String    @id @default(uuid())
  //Config details
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId String    @unique
  //Config values
}

model LinkValue {
  id          String    @id @default(uuid())
  //Link specific values
  link        String
  name        String
  //Audit for value
  audit       Audit     @relation(fields: [auditId], references: [id])
  auditId     String    @unique
  //Config value is for
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId String

  customValueMap   CustomValues? @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?       @unique
}

model MediaValue {
  id               String        @id @default(uuid())
  //Media specific values
  media            MediaDetails  @relation(fields: [mediaResourceId], references: [id])
  mediaResourceId  String
  //Audit for value
  audit            Audit         @relation(fields: [auditId], references: [id])
  auditId          String        @unique
  //Config value is for
  attribute        Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId      String
  customValueMap   CustomValues? @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?       @unique
}

model DropdownValue {
  id               String        @id @default(uuid())
  //Dropdown specific fields
  selectedOption   String?
  //Audit for value
  audit            Audit         @relation(fields: [auditId], references: [id])
  auditId          String        @unique
  //Config value is for
  attribute        Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId      String
  customValueMap   CustomValues? @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?       @unique
}

model DateValue {
  id               String        @id @default(uuid())
  //Date specific fields
  date             DateTime?
  //Audit for value
  audit            Audit         @relation(fields: [auditId], references: [id])
  auditId          String        @unique
  //Config value is for
  attribute        Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId      String
  customValueMap   CustomValues? @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?       @unique
}

model CheckboxValue {
  id               String        @id @default(uuid())
  //Checkbox specific fields
  checked          Boolean       @default(false)
  //Audit for value
  audit            Audit         @relation(fields: [auditId], references: [id])
  auditId          String        @unique
  //Config value is for
  attribute        Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId      String
  customValueMap   CustomValues? @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?       @unique
}

model RichTextValue {
  id               String                  @id @default(uuid())
  //RichText specific fields
  json             Json?
  text             String?
  //Audit for value
  audit            Audit                   @relation(fields: [auditId], references: [id])
  auditId          String                  @unique
  //Config value is for
  attribute        Attribute               @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId      String
  versionedItem    VersionedAttributeItem?
  resource         Resource?               @relation(fields: [resourceId], references: [id])
  resourceId       String?
  customValueMap   CustomValues?           @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?                 @unique
}

model UserValue {
  id               String        @id @default(uuid())
  //UserValue specific fields
  user             User?         @relation(fields: [userId], references: [id])
  userId           String?
  //Audit for user value
  audit            Audit         @relation(fields: [auditId], references: [id])
  auditId          String        @unique
  //Config value is for
  attribute        Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId      String
  customValueMap   CustomValues? @relation(fields: [customValueMapId], references: [id])
  customValueMapId String?       @unique
}

model UserGroup {
  id                   String           @id @default(uuid())
  //Friendly name of user group
  name                 String
  //List of users in user group
  users                User[]
  //Relations
  resourceApprovals    Resource[]
  userAttributes       UserConfig[]
  approvalsConfig      ApprovalsConfig? @relation(fields: [approvalsAttributeId], references: [id])
  approvalsAttributeId String?
}

model ActiveResourceTemplates {
  id                  String                    @id @default(uuid())
  organisation        Organisation              @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId      String                    @unique
  cassetteTemplate    ResourceAttributeTemplate @relation("cassetteTemplate", fields: [cassetteTemplateId], references: [id])
  cassetteTemplateId  String
  mediaTemplate       ResourceAttributeTemplate @relation("mediaTemplate", fields: [mediaTemplateId], references: [id])
  mediaTemplateId     String
  containerTemplate   ResourceAttributeTemplate @relation("containerTemplate", fields: [containerTemplateId], references: [id])
  containerTemplateId String
  copyTemplate        ResourceAttributeTemplate @relation("copyTemplate", fields: [copyTemplateId], references: [id])
  copyTemplateId      String
  campaignTemplate    ResourceAttributeTemplate @relation("campaignTemplate", fields: [campaignTemplateId], references: [id])
  campaignTemplateId  String
  briefTemplate       ResourceAttributeTemplate @relation("briefTemplate", fields: [briefTemplateId], references: [id])
  briefTemplateId     String
}

model Metric {
  id          String   @id @default(uuid())
  type        String
  numberValue Float?
  textValue   String?
  jsonValue   Json?
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([type, resourceId])
  @@index([resourceId], name: "metrics_resource_id")
}

model Organisation {
  id                         String                      @id @default(uuid())
  internalId                 Int                         @unique @default(autoincrement())
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  name                       String
  address                    String?
  city                       String?
  country                    String?
  igAccountName              String?
  socialHandle               String?
  socialImageUrl             String?
  meta                       Json?
  projects                   Project[]
  users                      User[]
  folders                    Folder[]
  files                      File[]
  userRoles                  UserRole[]
  userPermissions            UserPermission[]
  externalAccessTokens       ExternalAccessToken[]
  resources                  Resource[]                  @relation("organisation_uuid")
  internalResources          Resource[]                  @relation("organisation_internal_id")
  customAttributes           CustomConfig[]
  resourceAttributeTemplates ResourceAttributeTemplate[]
  activeResourceTemplates    ActiveResourceTemplates?
  externalApiCredentials     ExternalApiCredentials[]
  BackgroundJob              BackgroundJob[]
  ExternalDataImport         ExternalDataImport[]
  tags                       Tag[]
}

model User {
  id                           String                    @id @default(uuid())
  //User details
  name                         String
  email                        String                    @unique
  approvers                    String[]
  organisation                 Organisation              @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId                        String
  //Relations
  CassetteCopyField            CassetteCopyField[]
  MediaCopyField               MediaCopyField[]
  CassetteMediaField           CassetteMediaField[]
  CassetteCopyFieldUsersStatus CassetteFieldUserStatus[]
  MediaFieldUserStatus         MediaFieldUserStatus[]
  ownedFolders                 Folder[]
  ownedFiles                   File[]
  userRoles                    UserRole[]
  userPermissions              UserPermission[]
  attributeReferences          UserValue[]
  resourceId                   String?
  creatorOn                    Audit[]                   @relation("creator")
  updaterOn                    Audit[]                   @relation("lastUpdated")
  Changelog                    Changelog[]
  userGroups                   UserGroup[]
  assignedTo                   Resource[]
  approvals                    ApprovalsList[]
  ApprovalItem                 ApprovalItem[]
  BackgroundJob                BackgroundJob[]
}

enum RoleType {
  admin
  viewer
  editor
}

model Role {
  id          String       @id @default(uuid())
  roleType    RoleType     @unique
  name        String
  description String
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userRoles   UserRole[]
}

model UserRole {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  roleId         String
  role           Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique(fields: [userId, organisationId])
}

enum PermissionSlug {
  uploadFile
  viewHiddenProject
}

model Permission {
  id              String           @id @default(uuid())
  slug            PermissionSlug   @unique
  name            String
  description     String
  roles           Role[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userPermissions UserPermission[]
}

enum PermissionLevel {
  edit
  view
  none
}

model UserPermission {
  id             String          @id @default(uuid())
  permissionId   String
  permission     Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organisationId String
  organisation   Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  level          PermissionLevel @default(edit)

  @@unique(fields: [userId, organisationId, permissionId])
}

model Project {
  id         String     @id @default(uuid())
  name       String
  status     Status     @default(published)
  visibility Visibility @default(hidden)
  reference  String?    @default("")
  createdAt  DateTime   @default(now())

  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String

  cassettes Cassette[]
  folders   Folder[]
  files     File[]
}

enum FormatType {
  carousel
  video
  static
}

model CassetteTemplate {
  id                  String               @id @default(uuid())
  name                String
  maxMediaFields      Int?
  formatTypes         FormatType[]
  cassettes           Cassette[]
  copyFieldTypes      CopyFieldType[]
  mediaCopyFieldTypes MediaCopyFieldType[]
  previewTemplates    PreviewTemplate[]
  selectFieldTypes    SelectFieldType[]
  selectFields        DropdownConfig[]
  cassetteDetails     CassetteDetails[]
}

enum CopyFieldEditorFeatures {
  full
  limited
}

enum TextBoxSize {
  small
  medium
  large
}

model CopyFieldType {
  id             String                  @id @default(uuid())
  label          String
  editorFeatures CopyFieldEditorFeatures @default(limited)
  textBoxSize    TextBoxSize?

  cassetteTemplate        CassetteTemplate[]
  cassetteCopyField       CassetteCopyField[]
  cassetteFieldUserStatus CassetteFieldUserStatus[]
}

model MediaCopyFieldType {
  id             String                  @id @default(uuid())
  label          String
  editorFeatures CopyFieldEditorFeatures @default(limited)
  textBoxSize    TextBoxSize?

  cassetteTemplate        CassetteTemplate[]
  mediaCopyField          MediaCopyField[]
  cassetteFieldUserStatus MediaFieldUserStatus[]
}

model PreviewTemplate {
  id       String @id @default(uuid())
  icon     String
  name     String
  longName String

  cassetteTemplate CassetteTemplate[]

  previews Preview[]
}

model Preview {
  id String @id @default(uuid())

  previewTemplate   PreviewTemplate @relation(fields: [previewTemplateId], references: [id], onDelete: Cascade)
  previewTemplateId String

  Cassette   Cassette @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
  cassetteId String
  selected   Boolean  @default(true)
}

enum Status {
  published
  pending
  trashed
  no_status
  needs_review
  in_progress
  approved
}

enum Visibility {
  hidden
  visible
  creator
  admin
  invite
}

model Cassette {
  id             String    @id @default(uuid())
  cassetteNumber Int       @default(autoincrement())
  name           String
  meta           Json
  status         Status    @default(published)
  goLiveDate     DateTime?
  createdAt      DateTime  @default(now())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  cassetteTemplate   CassetteTemplate @relation(fields: [cassetteTemplateId], references: [id], onDelete: Cascade)
  cassetteTemplateId String

  formatTypes       FormatType[]
  previews          Preview[]
  copyFields        CassetteCopyField[]
  mediaFields       CassetteMediaField[]
  selectFields      CassetteSelectField[]
  mediaCopyFields   MediaCopyField[]
  mediaSelectFields MediaSelectField[]
  userStatuses      CassetteFieldUserStatus[]

  isCarousel Boolean @default(false)
}

model CassetteCopyField {
  id        String   @id @default(uuid())
  json      Json
  text      String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cassette   Cassette @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
  cassetteId String

  copyFieldType   CopyFieldType @relation(fields: [copyFieldTypeId], references: [id], onDelete: Cascade)
  copyFieldTypeId String

  updatedByUser   User   @relation(fields: [updatedByUserId], references: [id], onDelete: Cascade)
  updatedByUserId String

  @@unique(fields: [cassetteId, copyFieldTypeId, version])
}

enum CassetteMediaFieldType {
  video
  embed
  image
  auto
  raw
}

model MediaCopyField {
  id        String   @id @default(uuid())
  json      Json
  text      String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cassette   Cassette @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
  cassetteId String

  mediaField   CassetteMediaField @relation(fields: [mediaFieldId], references: [id], onDelete: Cascade)
  mediaFieldId String

  copyFieldType   MediaCopyFieldType @relation(fields: [copyFieldTypeId], references: [id], onDelete: Cascade)
  copyFieldTypeId String

  updatedByUser   User   @relation(fields: [updatedByUserId], references: [id], onDelete: Cascade)
  updatedByUserId String

  @@unique(fields: [copyFieldTypeId, mediaFieldId, version])
}

model CassetteMediaField {
  id        String                 @id @default(uuid())
  order     Int                    @default(0)
  type      CassetteMediaFieldType
  publicId  String
  mediaUrl  String
  width     Int
  height    Int
  duration  Float?
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  cassette   Cassette @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
  cassetteId String

  updatedByUser   User?   @relation(fields: [updatedByUserId], references: [id], onDelete: Cascade)
  updatedByUserId String?

  fileId String?
  file   File?   @relation(fields: [fileId], references: [id])

  copyFields   MediaCopyField[]
  selectFields MediaSelectField[]
  userStatuses MediaFieldUserStatus[]
}

model SelectFieldType {
  id                   String                @id @default(uuid())
  label                String
  cassetteSelectFields CassetteSelectField[]
  mediaSelectFields    MediaSelectField[]
  fieldOptions         SelectFieldOption[]
  cassetteTemplates    CassetteTemplate[]
}

model SelectFieldOption {
  id                   String                @id @default(uuid())
  text                 String
  selectFieldType      SelectFieldType       @relation(fields: [selectFieldTypeId], references: [id], onDelete: Cascade)
  selectFieldTypeId    String
  cassetteSelectFields CassetteSelectField[]
  mediaSelectFields    MediaSelectField[]
}

model CassetteSelectField {
  id              String            @id @default(uuid())
  fieldOption     SelectFieldOption @relation(fields: [fieldOptionId], references: [id], onDelete: Cascade)
  selectFieldType SelectFieldType   @relation(fields: [fieldTypeId], references: [id], onDelete: Cascade)
  fieldOptionId   String
  fieldTypeId     String
  cassetteId      String
  cassette        Cassette          @relation(fields: [cassetteId], references: [id], onDelete: Cascade)

  @@unique(fields: [cassetteId, fieldTypeId])
}

model MediaSelectField {
  id              String             @id @default(uuid())
  fieldOption     SelectFieldOption  @relation(fields: [fieldOptionId], references: [id], onDelete: Cascade)
  selectFieldType SelectFieldType    @relation(fields: [fieldTypeId], references: [id], onDelete: Cascade)
  fieldOptionId   String
  fieldTypeId     String
  mediaFieldId    String
  mediaField      CassetteMediaField @relation(fields: [mediaFieldId], references: [id], onDelete: Cascade)
  cassetteId      String
  cassette        Cassette           @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
}

model InboundEmail {
  id            String   @id @default(uuid())
  from          String
  html          String   @db.Text
  screenshotUrl String
  subject       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum UserStatus {
  none
  happy
}

model MediaFieldUserStatus {
  id     String     @id @default(uuid())
  status UserStatus @default(none)

  mediaField   CassetteMediaField @relation(fields: [mediaFieldId], references: [id], onDelete: Cascade)
  mediaFieldId String
  // cassette   Cassette @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
  // cassetteId String

  copyFieldType   MediaCopyFieldType @relation(fields: [copyFieldTypeId], references: [id], onDelete: Cascade)
  copyFieldTypeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique(fields: [mediaFieldId, copyFieldTypeId, userId])
}

model CassetteFieldUserStatus {
  id     String     @id @default(uuid())
  status UserStatus @default(none)

  cassette   Cassette @relation(fields: [cassetteId], references: [id], onDelete: Cascade)
  cassetteId String

  copyFieldType   CopyFieldType @relation(fields: [copyFieldTypeId], references: [id], onDelete: Cascade)
  copyFieldTypeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique(fields: [cassetteId, copyFieldTypeId, userId])
}

model Folder {
  id             String       @id @unique @default(uuid())
  name           String       @default("New Folder")
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  parentId       String?
  parent         Folder?      @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  folders        Folder[]     @relation("ParentChildren")
  deleted        Boolean      @default(false)
  files          File[]
  creatorId      String
  creator        User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  viewedAt       DateTime     @default(now())
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  Resource       Resource[]
}

enum FileType {
  cassette
  media
  brief
  copy
}

model File {
  id                  String               @id @unique @default(uuid())
  name                String
  parentId            String?
  parent              Folder?              @relation(fields: [parentId], references: [id], onDelete: Cascade)
  creatorId           String
  creator             User                 @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  deleted             Boolean              @default(false)
  description         String?
  organisationId      String
  organisation        Organisation         @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  type                FileType
  mediaAsset          MediaAsset?
  meta                Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  viewedAt            DateTime             @default(now())
  project             Project?             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String?
  cassetteMediaFields CassetteMediaField[]
  brief               Brief?
}

model MediaAsset {
  id       String                 @id @unique @default(uuid())
  type     CassetteMediaFieldType
  publicId String
  mediaUrl String
  width    Int
  height   Int
  duration Float?
  fileId   String?                @unique
  file     File?                  @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Brief {
  id          String    @id @unique @default(uuid())
  link        String?
  overview    String?
  dateBriefed DateTime?
  purpose     String?
  details     String?
  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?   @unique
}

model ExternalDataImport {
  id                     String       @id @unique @default(uuid())
  name                   String
  organisationId         String
  organisation           Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  dataSourceName         String
  successfulImportsCount Int
  successfulUpdatesCount Int
  skippedImportsCount    Int
  failedImportsCount     Int
  skippedImportsData     Json?
  failedImportsData      Json?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}

model BackgroundJob {
  id             String       @id @unique @default(uuid())
  jobType        JobType
  userId         String
  creator        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status         JobStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique(fields: [jobType, organisationId])
}

enum JobType {
  fetchMetaData
  uploadMedia
  createCassettes
  connectCassettes
}

enum JobStatus {
  pending
  running
  completed
  failed
}

model ShareLink {
  id   String @id @unique @default(uuid())
  hash Int    @unique
  url  String @unique
}

model ExternalAccessToken {
  id             String       @id @unique @default(uuid())
  token          String       @unique
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  externalOrg    ExternalOrg

  @@unique(fields: [externalOrg, organisationId])
}

enum ExternalOrg {
  meta
}

model ExternalApiCredentials {
  id             String       @id @unique @default(uuid())
  accountId      String
  token          String
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  externalOrg    ExternalOrg

  @@unique(fields: [externalOrg, organisationId])
}
